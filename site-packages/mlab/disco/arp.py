"""Access an ARP cache."""


class Error(Exception):
    """Base error class for arp module."""
    pass


class MACNotFound(Error):
    """No MAC address is associated with this address."""
    pass

# Path to the ARP cache file under the /proc filesystem.
_ARP_FILENAME = '/proc/net/arp'


class ArpCache(object):

    def __init__(self, arp_lines=None):
        """Parses an ARP cache.

        Example:
          $ cat /proc/net/arp
          IP address       HW type   Flags    HW address          Mask   Device
          23.228.128.130   0x1       0x2      78:19:f7:86:44:81   *      eth0

        Args:
          arp_lines: None or list of str, lines from an ARP cache. If None,
              read lines from the system ARP cache.
        """
        if arp_lines is None:
            with open(_ARP_FILENAME) as arp_file:
                arp_lines = arp_file.readlines()

        self._ip_to_mac = {}
        # Skip the header.
        for line in arp_lines[1:]:
            fields = line.split()
            self._ip_to_mac[fields[0]] = fields[3]

    def ip_to_mac(self, ip_address):
        """Returns the MAC address of the given IPv4 address.

        Args:
          ip_address: str, IPv4 address to lookup in the ARP cache.

        Raises:
          MACNotFound: the ip address is not found in the ARP cache.
        """
        try:
            return self._ip_to_mac[ip_address]
        except KeyError:
            raise MACNotFound('IP not found in ARP cache: %s' % ip_address)
