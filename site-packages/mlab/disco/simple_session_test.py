"""Tests for simple_session."""

import netsnmp
import unittest

# Third-party modules.
import mock

# Module under test.
import simple_session


def make_varbind(tag, val):
    var = netsnmp.Varbind(tag)
    var.val = val
    return var


@mock.patch.object(netsnmp, 'Varbind')
@mock.patch.object(netsnmp, 'VarList')
class SimpleSessionTest(unittest.TestCase):

    def setUp(self):
        self.var = make_varbind('sysDescr.0', 'Fake system description.')
        self.var_list = [
            make_varbind('BRIDGE-MIB::dot1dTpFdbPort.0.12.34.56.78.150', '2'),
            make_varbind('BRIDGE-MIB::dot1dTpFdbPort.0.12.34.56.78.160', '1'),
        ]
        self.mock_session = mock.Mock(spec=netsnmp.Session)
        self.mock_session.ErrorStr = None
        self.session = simple_session.SimpleSession(self.mock_session)

    def test_get(self, mock_varlist, mock_varbind):
        mock_varlist.return_value = [self.var]

        actual = self.session.get('sysDescr.0')

        self.assertItemsEqual(
            [{'tag': 'sysDescr.0',
              'val': self.var.val}], actual)
        self.mock_session.get.assert_called_once_with(mock_varlist.return_value)
        mock_varbind.assert_called_with('sysDescr.0')

    def test_get_returns_empty_list(self, mock_varlist, mock_varbind):
        mock_varlist.return_value = []

        actual = self.session.get('missingMib.0')

        self.assertItemsEqual([], actual)
        self.mock_session.get.assert_called_once_with(mock_varlist.return_value)
        mock_varbind.assert_called_with('missingMib.0')

    def test_get_raises_SNMPError_when_ErrorStr_is_not_empty(self, mock_varlist,
                                                             mock_varbind):
        mock_varlist.return_value = [self.var]
        self.mock_session.ErrorStr = 'Timeout'
        self.mock_session.ErrorInd = -24

        with self.assertRaises(simple_session.SNMPError):
            self.session.get('fakeMib.0')

        self.mock_session.get.assert_called_once_with(mock_varlist.return_value)
        mock_varbind.assert_called_with('fakeMib.0')

    def test_walk(self, mock_varlist, mock_varbind):
        mock_varlist.return_value = self.var_list

        actual = self.session.walk('BRIDGE-MIB::dot1dTpFdbPort')

        self.assertItemsEqual(
            [{'tag': 'BRIDGE-MIB::dot1dTpFdbPort.0.12.34.56.78.150',
              'val': '2'},
             {'tag': 'BRIDGE-MIB::dot1dTpFdbPort.0.12.34.56.78.160',
              'val': '1'}], actual)
        self.mock_session.walk.assert_called_once_with(
            mock_varlist.return_value)
        mock_varbind.assert_called_with('BRIDGE-MIB::dot1dTpFdbPort')

    def test_walk_returns_empty_list(self, mock_varlist, mock_varbind):
        mock_varlist.return_value = []

        actual = self.session.walk('missingMib.0')

        self.assertItemsEqual([], actual)
        self.mock_session.walk.assert_called_once_with(
            mock_varlist.return_value)
        mock_varbind.assert_called_with('missingMib.0')

    def test_walk_raises_SNMPError_when_ErrorStr_is_not_empty(
            self, mock_varlist, mock_varbind):
        mock_varlist.return_value = [self.var]
        self.mock_session.ErrorStr = 'Timeout'
        self.mock_session.ErrorInd = -24

        with self.assertRaises(simple_session.SNMPError):
            self.session.walk('fakeMib.0')

        self.mock_session.walk.assert_called_once_with(
            mock_varlist.return_value)
        mock_varbind.assert_called_with('fakeMib.0')


class FakeSessionTest(unittest.TestCase):
    """Tests for the simple_session.FakeSession class."""

    def setUp(self):
        self.session = simple_session.FakeSession()
        self.session.prepare('sysDescr.0', 'sysDescr.0',
                             'Fake system description.')

    def test_get(self):
        actual = self.session.get('sysDescr.0')

        self.assertItemsEqual(
            [{'tag': 'sysDescr.0',
              'val': 'Fake system description.'}], actual)

    def test_walk(self):
        actual = self.session.walk('sysDescr.0')

        self.assertItemsEqual(
            [{'tag': 'sysDescr.0',
              'val': 'Fake system description.'}], actual)


if __name__ == '__main__':
    unittest.main()
