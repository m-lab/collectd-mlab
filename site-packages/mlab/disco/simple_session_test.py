"""Tests for simple_session."""

import netsnmp
import unittest

# Third-party modules.
import mock

# Module under test.
import simple_session


class SimpleSessionTest(unittest.TestCase):

    def setUp(self):
        self.mock_session = mock.Mock(spec=netsnmp.Session)
        self.mock_session.ErrorStr = None
        self.session = simple_session.SimpleSession(self.mock_session)

    def test_get(self):

        def fake_get(varlist):
            """Replaces netsnmp.Session.get to set varbind value."""
            varlist[0].val = 'fake sysdescr'

        self.mock_session.get.side_effect = fake_get

        actual = self.session.get('sysDescr.0')

        self.assertEqual(1, len(actual))
        self.assertEqual('sysDescr.0', actual[0].oid)
        self.assertEqual('fake sysdescr', actual[0].value)

    def test_get_raises_SNMPError_when_varlist_has_no_values(self):

        def fake_get(varlist):
            """Replaces netsnmp.Session.get to set varbind value."""
            varlist[0].val = None

        self.mock_session.get.side_effect = fake_get

        with self.assertRaises(simple_session.SNMPError):
            self.session.get('missingMib.0')

    def test_get_raises_SNMPError_when_ErrorStr_is_not_empty(self):
        self.mock_session.ErrorStr = 'Timeout'
        self.mock_session.ErrorInd = -24

        with self.assertRaises(simple_session.SNMPError):
            self.session.get('fakeMib.0')

    def test_walk(self):

        def fake_walk(varlist):
            """Replaces netsnmp.Session.walk to add new varbind values."""
            del varlist[0]
            varlist.append(netsnmp.Varbind(
                'BRIDGE-MIB::dot1dTpFdbPort.0.12.34.56.78.150',
                val='2'))
            varlist.append(netsnmp.Varbind(
                'BRIDGE-MIB::dot1dTpFdbPort.0.12.34.56.78.160',
                val='1'))

        self.mock_session.walk.side_effect = fake_walk

        actual = self.session.walk('BRIDGE-MIB::dot1dTpFdbPort')

        self.assertEqual(2, len(actual))
        self.assertEqual('BRIDGE-MIB::dot1dTpFdbPort.0.12.34.56.78.150',
                         actual[0].oid)
        self.assertEqual('2', actual[0].value)
        self.assertEqual('BRIDGE-MIB::dot1dTpFdbPort.0.12.34.56.78.160',
                         actual[1].oid)
        self.assertEqual('1', actual[1].value)

    def test_walk_raises_SNMPError_when_varlist_has_no_values(self):

        def fake_walk(varlist):
            """Replaces netsnmp.Session.get to set varbind value."""
            varlist[0].val = None

        self.mock_session.walk.side_effect = fake_walk

        with self.assertRaises(simple_session.SNMPError):
            self.session.get('missingMib.0')

    def test_walk_raises_SNMPError_when_ErrorStr_is_not_empty(self):
        self.mock_session.ErrorStr = 'Timeout'
        self.mock_session.ErrorInd = -24

        with self.assertRaises(simple_session.SNMPError):
            self.session.walk('fakeMib.0')


class FakeSessionTest(unittest.TestCase):
    """Tests for the simple_session.FakeSession class."""

    def setUp(self):
        self.session = simple_session.FakeSession()

    def test_get(self):
        self.session.prepare('sysDescr.0', 'sysDescr.0',
                             'Fake system description.')

        actual = self.session.get('sysDescr.0')

        self.assertEqual(1, len(actual))
        self.assertEqual('sysDescr.0', actual[0].oid)
        self.assertEqual('Fake system description.', actual[0].value)

    def test_get_raises_SNMPError_when_results_are_empty(self):
        with self.assertRaises(simple_session.SNMPError):
            self.session.get('sysDescr.0')

    def test_walk(self):
        # Two results for the same OID.
        self.session.prepare('a.0', 'a.0.1', 'value1')
        self.session.prepare('a.0', 'a.0.2', 'value2')

        actual = self.session.walk('a.0')

        self.assertEqual(2, len(actual))
        self.assertEqual('a.0.1', actual[0].oid)
        self.assertEqual('value1', actual[0].value)
        self.assertEqual('a.0.2', actual[1].oid)
        self.assertEqual('value2', actual[1].value)

    def test_walk_raises_SNMPError_when_results_are_empty(self):
        with self.assertRaises(simple_session.SNMPError):
            self.session.get('a.0')


if __name__ == '__main__':
    unittest.main()
