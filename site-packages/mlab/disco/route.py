"""Implements a minimally compatible form of netifaces.gateways."""

import netifaces

# Path to the routing table file under the /proc filesystem.
_ROUTE_FILENAME = '/proc/net/route'

# The default IPv4 route address as reported by /proc/net/route.
_ROUTE_DEFAULT_ADDR = '00000000'

AF_INET = netifaces.AF_INET


# TODO(soltesz): Remove this module and function when netifaces-0.10 is
# available in a system package.
def gateways(route_lines=None):
    """Parses a routing table, and returns the default IPv4 gateway.

    This implementation does not support all features of netifaces.gateways.
    Only the 'default' key is present in the returned dict and only the AF_INET
    (IPv4) family is supported.

    Example:
      $ cat /proc/net/route
      Iface   Destination   Gateway   Flags   RefCnt  Use     Metric  ...
      eth0    00000000      01020304  0003    0       0       0       ...

    Would return:
      {'default': {AF_INET: ('4.3.2.1', 'eth0')}}

    Args:
      route_lines: None or list of str, lines read from a routing table. If
          None, read lines from the system routing table.

    Returns:
      dict of dict of tuple, the outer dict will always have one key,
          'default'. The inner dict will always have one key, AF_INET. The value
          is a tuple of str, str with the gateway IPv4 address and device name.
          For example: {'default': {AF_INET: ('4.3.2.1', 'eth0')}}
    """
    if route_lines is None:
        with open(_ROUTE_FILENAME) as route_file:
            route_lines = route_file.readlines()

    # Skip the header.
    for line in route_lines[1:]:
        fields = line.split()
        if fields[1] == _ROUTE_DEFAULT_ADDR:
            gateway_ip = _hex_ip_to_dec_ip(fields[2])
            return {'default': {AF_INET: (gateway_ip, fields[0])}}
    return {}


def _hex_ip_to_dec_ip(hex_ip):
    """Converts a hexadecimal IPv4 address to quad-dotted form.

    Args:
      hex_ip: str, zero padded, network order, hexadecimal format IPv4 address.
          e.g. "01020A04".

    Returns:
      str, quad-dotted format IPv4 address, e.g. "4.10.2.1"
    """
    fields = [hex_ip[i:i + 2] for i in range(0, len(hex_ip), 2)]
    dec_fields = [str(int(v, 16)) for v in fields]
    dec_fields.reverse()
    return '.'.join(dec_fields)
