"""Tests for discovery."""

import unittest

# Third-party modules.
import mock
from mlab.disco import simple_session
from mlab.disco import models
from mlab.disco import network

# Module under test.
import discovery

_JUNIPER_QFX_SYS_DESCR = ('Juniper Networks, Inc. qfx5100-48s-6q Ethernet '
                          'Switch, kernel JUNOS 13.2X51-D38')
_CISCO_SYS_DESCR = ('Cisco IOS Software, C2960S Software '
                    '(C2960S-UNIVERSALK9-M), Version 12.2(55)SE7')


class DiscoverySessionTest(unittest.TestCase):

    def setUp(self):
        self.fake_session = simple_session.FakeSession()
        self.model_qfx = models.Model(name='qfx', pattern='qfx', qbridge=True)
        self.model_cisco = models.Model(name='cisco',
                                        pattern='Cisco',
                                        vlan=True)
        self.switch_config = models.Config(
            models=(self.model_qfx, self.model_cisco),
            default_oids={})
        self.session = discovery.DiscoverySession(self.fake_session,
                                                  self.switch_config)

    def test_get_model(self):
        # Identify the switch.
        self.fake_session.prepare('sysDescr.0', 'sysDescr.0',
                                  _JUNIPER_QFX_SYS_DESCR)

        actual = self.session.get_model()

        self.assertEqual(self.model_qfx.name, actual.name)
        self.assertEqual(self.model_qfx.pattern, actual.pattern)
        self.assertEqual(self.model_qfx.qbridge, actual.qbridge)
        self.assertEqual(self.model_qfx.vlan, actual.vlan)

    @mock.patch.object(network, 'get_local_mac')
    @mock.patch.object(network, 'get_uplink_mac')
    def test_auto_discover_ifindex(self, mock_get_uplink_mac,
                                   mock_get_local_mac):
        mock_get_uplink_mac.return_value = '00:01:02:03:04:05'
        mock_get_local_mac.return_value = '00:01:02:03:04:06'
        # Identify the switch.
        self.fake_session.prepare('sysDescr.0', 'sysDescr.0',
                                  _JUNIPER_QFX_SYS_DESCR),
        # Setup uplink MAC.
        self.fake_session.prepare(
            discovery._OIDS['Q-BRIDGE-MIB::dot1qTpFdbPort'],
            discovery._mac_to_oid('00:01:02:03:04:05'), '10')
        self.fake_session.prepare(
            discovery._OIDS['BRIDGE-MIB::dot1dBasePortIfIndex'] + '.10',
            'any_oid_prefix', '12')
        # Setup local MAC.
        self.fake_session.prepare(
            discovery._OIDS['Q-BRIDGE-MIB::dot1qTpFdbPort'],
            discovery._mac_to_oid('00:01:02:03:04:06'), '20')
        self.fake_session.prepare(
            discovery._OIDS['BRIDGE-MIB::dot1dBasePortIfIndex'] + '.20',
            'any_oid_prefix', '22')

        found_ports = self.session.auto_discover_ifindex()

        self.assertItemsEqual([('uplink', '12'), ('local', '22')], found_ports)

    @mock.patch.object(network, 'get_local_mac')
    @mock.patch.object(network, 'get_uplink_mac')
    def test_auto_discover_ifindex_raises_PortLookupFailed(
            self, mock_get_uplink_mac, mock_get_local_mac):
        mock_get_uplink_mac.return_value = '00:01:02:03:04:05'
        mock_get_local_mac.return_value = '00:01:02:03:04:06'
        # Identify the switch.
        self.fake_session.prepare('sysDescr.0', 'sysDescr.0',
                                  _JUNIPER_QFX_SYS_DESCR)
        # Setup uplink MAC.
        self.fake_session.prepare(
            discovery._OIDS['Q-BRIDGE-MIB::dot1qTpFdbPort'],
            discovery._mac_to_oid('00:01:02:03:04:05'), '10')
        # Exclude the uplink BRIDGE-MIB::dot1dBasePortIfIndex so lookup fails.

        with self.assertRaises(discovery.PortLookupFailed):
            self.session.auto_discover_ifindex()

    @mock.patch.object(network, 'get_local_mac')
    @mock.patch.object(network, 'get_uplink_mac')
    def test_auto_discover_ifindex_without_qbridge(self, mock_get_uplink_mac,
                                                   mock_get_local_mac):
        mock_get_uplink_mac.return_value = '00:01:02:03:04:05'
        mock_get_local_mac.return_value = '00:01:02:03:04:06'
        # Identify the switch.
        self.fake_session.prepare('sysDescr.0', 'sysDescr.0', _CISCO_SYS_DESCR)
        # Setup uplink MAC.
        self.fake_session.prepare(discovery._OIDS['BRIDGE-MIB::dot1dTpFdbPort'],
                                  discovery._mac_to_oid('00:01:02:03:04:05'),
                                  '10')
        self.fake_session.prepare(
            discovery._OIDS['BRIDGE-MIB::dot1dBasePortIfIndex'] + '.10',
            'any_oid_prefix', '12')
        # Setup local MAC.
        self.fake_session.prepare(discovery._OIDS['BRIDGE-MIB::dot1dTpFdbPort'],
                                  discovery._mac_to_oid('00:01:02:03:04:06'),
                                  '20')
        self.fake_session.prepare(
            discovery._OIDS['BRIDGE-MIB::dot1dBasePortIfIndex'] + '.20',
            'any_oid_prefix', '22')

        found_ports = self.session.auto_discover_ifindex()

        self.assertItemsEqual([('uplink', '12'), ('local', '22')], found_ports)

    def test_auto_discover_vlan(self):
        # Identify the switch.
        self.fake_session.prepare('sysDescr.0', 'sysDescr.0', _CISCO_SYS_DESCR)
        # Setup VLAN IDs to return.
        self.fake_session.prepare(
            discovery._OIDS['CISCO-VTP-MIB::vtpVlanIfIndex'],
            'any-tag-does-not-matter', '10')

        found_vlans = self.session.auto_discover_vlan()

        self.assertItemsEqual(['10'], found_vlans)

    def test_auto_discover_vlan_returns_vlan_1(self):
        # Identify the switch.
        self.fake_session.prepare('sysDescr.0', 'sysDescr.0', _CISCO_SYS_DESCR)
        # Setup VLAN IDs with vlan 1 and another vlan.
        self.fake_session.prepare(
            discovery._OIDS['CISCO-VTP-MIB::vtpVlanIfIndex'],
            'any-tag-does-not-matter', '1')
        self.fake_session.prepare(
            discovery._OIDS['CISCO-VTP-MIB::vtpVlanIfIndex'],
            'any-tag-does-not-matter', '20')

        found_vlans = self.session.auto_discover_vlan()

        self.assertItemsEqual(['1', '20'], found_vlans)

    def test_auto_discover_vlan_returns_empty_list(self):
        # Identify the switch.
        self.fake_session.prepare('sysDescr.0', 'sysDescr.0',
                                  _JUNIPER_QFX_SYS_DESCR)

        found_vlans = self.session.auto_discover_vlan()

        self.assertItemsEqual([], found_vlans)


if __name__ == '__main__':
    unittest.main()
