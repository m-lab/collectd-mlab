"""A simple interface for SNMP sessions."""

import collections
import netsnmp


class Error(Exception):
    """Base error class for simple_session module."""
    pass


class SNMPError(Error):
    """A netsnmp error occurred."""
    pass


class SimpleSession(object):
    """A simpler session interface for netsnmp.Session."""

    def __init__(self, session):
        """Creates a SimpleSession object.

        Args:
          session: netsnmp.Session, the SNMP session to use for queries.
        """
        self._session = session

    def get(self, oid):
        """Reads the value at the given OID.

        If an error occurs such that the get could not be completed, an empty
        list is returned.

        Returns:
          list of dict, with each dict containing 'tag' and 'val' keys.

        Raises:
          SNMPError: netsnmp session reports any error.
        """
        oids = netsnmp.VarList(netsnmp.Varbind(oid))
        self._session.get(oids)
        if self._session.ErrorStr:
            raise SNMPError('%s: %s' % (self._session.ErrorStr,
                                        self._session.ErrorInd))

        return self._varlist_to_list(oids)

    def walk(self, oid):
        """Reads all values in the MIB tree starting at the given OID.

        If an error occurs such that the walk could not be completed, an empty
        list is returned.

        Returns:
          list of dict, with each dict containing a 'tag' and 'val' keys.

        Raises:
          SNMPError: netsnmp session reports any error.
        """
        oids = netsnmp.VarList(netsnmp.Varbind(oid))
        self._session.walk(oids)
        if self._session.ErrorStr:
            raise SNMPError('%s: %s' % (self._session.ErrorStr,
                                        self._session.ErrorInd))
        return self._varlist_to_list(oids)

    def _varlist_to_list(self, oids):
        """Converts a netsnmp.Varlist to a list of dict."""
        # The oid.val attribute starts as None and is set after a successful
        # request. If it is still None, then the request failed and it should
        # be excluded from the return value.
        return [{'tag': oid.tag + ('.' + oid.iid if oid.iid else ''),
                 'val': oid.val} for oid in oids if oid.val is not None]


class FakeSession(object):
    """Implements a fake SimpleSession interface for tests."""

    def __init__(self):
        self._mib = collections.defaultdict(list)

    def prepare(self, oid, tag, val):
        """Associates an OID with a tag,value for later calls to get or walk."""
        self._mib[oid].append({'tag': tag, 'val': val})

    def get(self, oid):
        return self._mib[oid]

    def walk(self, oid):
        return self._mib[oid]
