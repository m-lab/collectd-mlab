"""A simple interface for SNMP sessions."""

import collections
# TODO(soltesz): replace netsnmp with easysnmp when available.
import netsnmp


class Error(Exception):
    """Base error class for simple_session module."""
    pass


class SNMPError(Error):
    """A netsnmp error occurred or no results returned."""
    pass


# TODO(soltesz): replace SNMPVariable with easysnmp.SNMPVariable when available.
class SNMPVariable(object):
    """An SNMP variable representing the result of a get or walk query.

    Attributes:
        oid: str, the OID of the variable.
        value: str, the OID value.
    """

    def __init__(self, oid, value):
        self.oid = oid
        self.value = value


class SimpleSession(object):
    """A simpler session interface for netsnmp.Session."""

    def __init__(self, session):
        """Creates a SimpleSession object.

        Args:
          session: netsnmp.Session, the SNMP session to use for queries.
        """
        self._session = session

    def get(self, oid):
        """Reads the value at the given OID.

        If an error occurs such that the get could not be completed, an empty
        list is returned.

        Returns:
          list of SNMPVariable, the results of the get request.

        Raises:
          SNMPError: netsnmp session reports any error, or no result from get.
        """
        oids = netsnmp.VarList(netsnmp.Varbind(oid))
        self._session.get(oids)
        return self._handle_result(oid, oids)

    def walk(self, oid):
        """Reads all values in the MIB tree starting at the given OID.

        If an error occurs such that the walk could not be completed, an empty
        list is returned.

        Returns:
          list of SNMPVariable, the results of the walk request.

        Raises:
          SNMPError: netsnmp session reports any error, or no results from walk.
        """
        oids = netsnmp.VarList(netsnmp.Varbind(oid))
        self._session.walk(oids)
        return self._handle_result(oid, oids)

    def _handle_result(self, oid, oids):
        """Converts results in oids, or raises exceptions for errors."""
        if self._session.ErrorStr:
            raise SNMPError('netsnmp error; %s: %s' % (self._session.ErrorStr,
                                                       self._session.ErrorInd))
        result = self._varlist_to_list(oids)
        if not result:
            raise SNMPError('netsnmp error unknown; OID may be invalid: ' + oid)
        return result

    def _varlist_to_list(self, oids):
        """Converts a netsnmp.Varlist to a list of SNMPVariable."""
        # The oid.val attribute starts as None and is set after a successful
        # request. If it is still None, then the request failed and it should
        # be excluded from the return value.
        result = []
        for oid in oids:
            if oid.val is not None:
                tag = oid.tag + ('.' + oid.iid if oid.iid else '')
                result.append(SNMPVariable(tag, oid.val))
        return result


class FakeSession(object):
    """Implements a fake SimpleSession interface for tests."""

    def __init__(self):
        self._mib = collections.defaultdict(list)

    def prepare(self, oid, tag, value):
        """Associates an OID with a tag,value for later calls to get or walk."""
        self._mib[oid].append(SNMPVariable(tag, value))

    def get(self, oid):
        return self._mib[oid]

    def walk(self, oid):
        return self._mib[oid]
