"""Tests for models."""

import StringIO
import unittest

import models


class LoadSwitchConfigTest(unittest.TestCase):

    def test_load_switch_config_load_and_get_model_successfully(self):
        config_fd = StringIO.StringIO("""
!config
models:
    - !model
      name: procurve
      pattern: ProCurve
      oids:
          discards:
              !oid
              rx: dis_model_rx
              tx: dis_model_tx

          broadcast:
              !oid
              rx: bro_rx
              tx: bro_tx

default_oids:
    discards:
        !oid
        rx: dis_default_rx
        tx: dis_default_tx

    octets:
        !oid
        rx: oct_rx
        tx: oct_tx
""")

        config = models.load_switch_config(config_fd)
        model = config.get_model('Fake ProCurve sysDescr message')

        # Check config.
        self.assertEqual(1, len(config.models))
        self.assertEqual('procurve', config.models[0].name)
        self.assertEqual('ProCurve', config.models[0].pattern)
        self.assertEqual(2, len(config.default_oids))
        self.assertEqual('dis_default_rx', config.default_oids['discards'].rx)
        self.assertEqual('dis_default_tx', config.default_oids['discards'].tx)
        self.assertEqual('oct_rx', config.default_oids['octets'].rx)
        self.assertEqual('oct_tx', config.default_oids['octets'].tx)
        # Check model, which inherits default_oids while preserving model oids.
        self.assertEqual(3, len(model.oids))
        self.assertEqual('dis_model_rx', model.oids['discards'].rx)
        self.assertEqual('dis_model_tx', model.oids['discards'].tx)
        self.assertEqual('bro_rx', model.oids['broadcast'].rx)
        self.assertEqual('bro_tx', model.oids['broadcast'].tx)
        self.assertEqual('oct_rx', model.oids['octets'].rx)
        self.assertEqual('oct_tx', model.oids['octets'].tx)

    def test_load_switch_config_raises_BadConfiguration_when_config_misaligned(
            self):
        config_fd = StringIO.StringIO("""
!config
models:
    - !model
      name: procurve
     pattern: <--MISALIGNED

default_oids:
    discards:
        !oid
        rx: abc
        tx: def
""")
        with self.assertRaises(models.BadConfiguration):
            models.load_switch_config(config_fd)


class ConfigTest(unittest.TestCase):

    def test_init_raises_BadConfiguration_when_parmaters_not_given(self):
        with self.assertRaises(models.BadConfiguration):
            models.Config(models=None, default_oids=None, line='none')

    def test_get_model_raises_UnknownSwitchModel_when_no_patterns_match(self):
        model = models.Model(name='ok', pattern='foo', oids={})
        config = models.Config(models=(model,), default_oids={})

        with self.assertRaises(models.UnknownSwitchModel):
            config.get_model('sysDescr value that does not contain pattern')

    def test_get_model_raises_MultipleMatches_when_several_patterns_match(self):
        model1 = models.Model(name='switch1', pattern='foo', oids={})
        model2 = models.Model(name='switch2', pattern='bar', oids={})
        config = models.Config(models=(model1, model2), default_oids={})

        with self.assertRaises(models.MultipleMatches):
            config.get_model('sysDescr includes both foo and bar patterns')


class ModelTest(unittest.TestCase):

    def test_init_raises_BadConfiguration_when_parameters_not_given(self):
        with self.assertRaises(models.BadConfiguration):
            models.Model(name=None, line='none')

    def test_oid_names(self):
        oids = {}
        oids['octets'] = models.OID(rx='abc', tx='def')
        oids['discards'] = models.OID(rx='ghi', tx='jkl')
        model = models.Model(name='ok', pattern='foo', oids=oids)

        actual = model.oid_names()

        self.assertItemsEqual(['octets', 'discards'], actual)

    def test_lookup_oids(self):
        oids = {}
        oids['octets'] = models.OID(rx='abc.{ifIndex}', tx='def.{ifIndex}')
        model = models.Model(name='ok', pattern='foo', oids=oids)

        actual = model.lookup_oids('octets', '10')

        self.assertItemsEqual(('abc.10', 'def.10'), actual)

    def test_lookup_oids_raises_UnknownOIDName_when_oid_name_not_present(self):
        model = models.Model(name='ok', pattern='foo', oids={})

        with self.assertRaises(models.UnknownOIDName):
            model.lookup_oids('missing-oid-name', '10')


class OIDTest(unittest.TestCase):

    def test_init_raises_BadConfiguration_when_parameters_not_given(self):
        with self.assertRaises(models.BadConfiguration):
            models.OID(rx=None, line='none')


if __name__ == '__main__':
    unittest.main()
